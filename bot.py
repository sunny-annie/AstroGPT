import random
import logging
import keyboard as kb
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from config import TOKEN
from model import get_prediction

logging.basicConfig(level=logging.INFO, filename="py_log.log", filemode="w")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

signs_dict = {"–û–≤–µ–Ω ‚ôà": "–û–≤–Ω—ã",
              "–¢–µ–ª–µ—Ü ‚ôâ": "–¢–µ–ª—å—Ü—ã",
              "–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôä": "–ë–ª–∏–∑–Ω–µ—Ü—ã",
              "–†–∞–∫ ‚ôã": "–†–∞–∫–∏",
              "–õ–µ–≤ ‚ôå": "–õ—å–≤—ã",
              "–î–µ–≤–∞ ‚ôç": "–î–µ–≤—ã",
              "–í–µ—Å—ã ‚ôé": "–í–µ—Å—ã",
              "–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôè": "–°–∫–æ—Ä–ø–∏–æ–Ω—ã",
              "–°—Ç—Ä–µ–ª–µ—Ü ‚ôê": "–°—Ç—Ä–µ–ª—å—Ü—ã",
              "–ö–æ–∑–µ—Ä–æ–≥ ‚ôë": "–ö–æ–∑–µ—Ä–æ–≥–∏",
              "–í–æ–¥–æ–ª–µ–π ‚ôí": "–í–æ–¥–æ–ª–µ–∏",
              "–†—ã–±—ã ‚ôì": "–†—ã–±—ã"}

standby_messages_list = ["–û–¥–Ω—É –º–∏–Ω—É—Ç–∫—É! –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.",
                         "–°–≤–µ—Ä—è–µ–º—Å—è –ø–æ –∑–≤–µ–∑–¥–∞–º: –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å.",
                         "–ó–≤–µ–∑–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è. –í—Å–∫–æ—Ä–µ –≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º.",
                         "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å! –í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è.",
                         "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–∞–∑–ª —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è. –í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤!",
                         "–í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑—É–µ—Ç—Å—è. –í—Å–∫–æ—Ä–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ —Å–≤–æ—é —Å—É–¥—å–±—É, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—É—é –∑–≤–µ–∑–¥–∞–º–∏!",
                         "–í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø —É–∂–µ –≤ –ø—É—Ç–∏, –æ–∂–∏–¥–∞–π—Ç–µ!",
                         "–ú—ã –∏–∑—É—á–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ –≤–∞—à—É —Å—É–¥—å–±—É. –í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."]


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_name = message.from_user.full_name
    user_id = message.from_user.id
    logging.info(f'{user_name=} {user_id} sent message: {message.text}')
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –ª—é–±–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞. '
                        '–ù–∞–∂–º–∏ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. \n'
                        '/help - –≤—ã–∑–≤–∞—Ç—å –ø–æ–º–æ—â—å',
                        reply_markup=kb.greet_kb)


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    user_name = message.from_user.full_name
    user_id = message.from_user.id
    logging.info(f'{user_name=} {user_id} sent message: {message.text}')
    await message.reply("/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                        "/help - –≤—ã–∑–≤–∞—Ç—å –ø–æ–º–æ—â—å\n"
                        "/select - –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞\n")


@dp.message_handler(Text(equals="–ù–∞—á–∞—Ç—å! üîÆ"))
@dp.message_handler(commands=['select'])
async def select_sign(message: types.Message):
    user_name = message.from_user.full_name
    user_id = message.from_user.id
    logging.info(f'{user_name=} {user_id} sent message: {message.text}')
    await message.reply("–í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=kb.markup)


@dp.message_handler(Text(equals=["–û–≤–µ–Ω ‚ôà", "–¢–µ–ª–µ—Ü ‚ôâ", "–ë–ª–∏–∑–Ω–µ—Ü—ã ‚ôä",
                                 "–†–∞–∫ ‚ôã", "–õ–µ–≤ ‚ôå", "–î–µ–≤–∞ ‚ôç",
                                 "–í–µ—Å—ã ‚ôé", "–°–∫–æ—Ä–ø–∏–æ–Ω ‚ôè", "–°—Ç—Ä–µ–ª–µ—Ü ‚ôê",
                                 "–ö–æ–∑–µ—Ä–æ–≥ ‚ôë", "–í–æ–¥–æ–ª–µ–π ‚ôí", "–†—ã–±—ã ‚ôì"]))
async def generate_prediction(message: types.Message):
    user_name = message.from_user.full_name
    user_id = message.from_user.id
    standby_reply = random.choice(standby_messages_list)
    await bot.send_message(message.from_user.id, standby_reply)
    logging.info(
        f'Message: "{standby_reply}" sent to user {user_name=} {user_id}')
    txt = get_prediction(signs_dict[message.text])
    logging.info(f'User {user_name=} {user_id} sent message: {message.text}. \n '
                 f'Message: "{txt}" sent to user {user_name=} {user_id}')
    await message.reply(txt, reply_markup=kb.markup)


@dp.message_handler()
async def process_random_messages(message: types.Message):
    user_name = message.from_user.full_name
    user_id = message.from_user.id
    logging.info(f'{user_name=} {user_id} sent message: {message.text}')
    await bot.send_message(message.from_user.id, f"{user_name}, –≤—ã–±–µ—Ä–∏ –∑–Ω–∞–∫:", reply_markup=kb.markup)


if __name__ == '__main__':
    executor.start_polling(dp)
